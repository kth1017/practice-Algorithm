@ 웬만한 알고리즘은 중간값 자주 이용

#소수
- 에라토스테네스의 체 로직을 코드화해서 이용

#이진 탐색
- 라이브러리의 시간 복잡도, 재귀/반복 방식 확인

#유클리드 호제법
- 최대공약수, 최소공배수
- 시간복잡도는 O(logN)

#그리디
- 현재 상황에서 가장 좋은 것만 선택하는 방법
- 순간은 최적이지만 전체 결과는 모름

#그래프
- DFS(스택, 재귀), BFS(큐)
- 다익스트라, 벨만포드 > 최소 가중치 합 이용 (음의 가중치가 있을 때 유리)
- 크루스칼, 프림 > 최소 신장 트리 이용 (간선의 수가 적을 때 유리)
- topological sort(위상 정렬) > 순서가 정해져 있는 작업을 차례로 수행해야 할 때 유리(방향성이 있는 그래프의 모든 노드를 방향성에 거스르지 않도록 순서대로 나열)
- lowest common ancestor(LCA) > 트리에서 두 노드의 가장 가까운 공통 조상을 찾는 알고리즘


